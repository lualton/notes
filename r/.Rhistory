knitr::opts_chunk$set(echo = TRUE)
# Do not change this code
x1 <- c(1, 2, 3, 4, 5, 20)
x2 <- c(3, -20, 4, 5, 6, 10)
min(x1)
max(x1)
min_max <- function(data, find_max){
if (find_max == 1){
a = paste("The maximum of the data is", max(data))
print(a)
}
else if (find_max == 0){
a = paste("The minimum of the data is", min(data))
print(a)
}
}
min_max(x1, find_max=1)
custom_max <- function(values){
a = values[1]
for(i in values){
if(i > a){
a = i
}
}
return(a)
}
custom_max(x2)
mtcars <- mtcars # Don't change this line
set.seed(1) # Don't change this line
test_split <- function(data, p){
obs = nrow(data)
test_set <- data[sample(obs, p*obs), ]
return(test_set)
}
test_split(mtcars, .25)[,1]
test_split(mtcars, .25)[,1]
mtcars <- mtcars # Don't change this line
set.seed(1) # Don't change this line
train_test_split <- function(data, p){
obs = nrow(data)
idx <- sample(obs, p*obs)
return(idx)
}
index_split <- train_test_split(mtcars, .25)
index_split
train_data <- mtcars[-index_split, ]
test_data <- mtcars[index_split, ]
mtcars <- mtcars # Don't change this line
set.seed(1) # Don't change this line
test_sizes = c(.10, .25, .5) # Don't change this line
for(i in test_sizes){
# Split the index of each dataset by the size
# print("Splitting Data into Train and Test Sets")
index_split <- train_test_split(mtcars, i)
train_data <- mtcars[-index_split, ]
test_data <- mtcars[index_split, ]
# Fit and predict
# print("Fitting and Predicting")
model_fit <- lm(mpg ~ ., data = train_data)
prediction <- predict(model_fit, test_data)
#
mse <- mean((prediction - test_data$mpg)^2)
print(paste("The MSE for test size of", i, " is", mse))
}
knitr::opts_chunk$set(echo = TRUE)
# Do not change this code
x1 <- c(1, 2, 3, 4, 5, 20)
x2 <- c(3, -20, 4, 5, 6, 10)
knitr::opts_chunk$set(echo = TRUE)
# Do not change this code
x1 <- c(1, 2, 3, 4, 5, 20)
x2 <- c(3, -20, 4, 5, 6, 10)
min(x1)
max(x1)
min_max(x1)
min_max <- function(data, find_max){
if (find_max == 1){
a = paste("The maximum of the data is", max(data))
print(a)
}
else if (find_max == 0){
a = paste("The minimum of the data is", min(data))
print(a)
}
}
min_max(x1, find_max=1)
